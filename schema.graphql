# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type User {
  id: ID!
  tid: Int
  firstName: String
  lastName: String
  language: String
  createdAt: DateTime
}

input UserWhereUniqueInput {
  id: ID
  tid: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  tid: IntFilter
  firstName: StringFilter
  lastName: StringFilter
  language: StringFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input UserOrderByInput {
  id: OrderDirection
  tid: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  language: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  tid: Int
  firstName: String
  lastName: String
  language: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  tid: Int
  firstName: String
  lastName: String
  language: String
  createdAt: DateTime
}

type Channel {
  id: ID!
  tid: Int
  username: String
  title: String
  createdAt: DateTime
}

input ChannelWhereUniqueInput {
  id: ID
  tid: Int
  username: String
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
  id: IDFilter
  tid: IntFilter
  username: StringFilter
  title: StringFilter
  createdAt: DateTimeNullableFilter
}

input ChannelOrderByInput {
  id: OrderDirection
  tid: OrderDirection
  username: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
}

input ChannelUpdateInput {
  tid: Int
  username: String
  title: String
  createdAt: DateTime
}

input ChannelUpdateArgs {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateInput!
}

input ChannelCreateInput {
  tid: Int
  username: String
  title: String
  createdAt: DateTime
}

type Subscription {
  id: ID!
  user: User
  channel: Channel
  createdAt: DateTime
}

input SubscriptionWhereUniqueInput {
  id: ID
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  id: IDFilter
  user: UserWhereInput
  channel: ChannelWhereInput
  createdAt: DateTimeNullableFilter
}

input SubscriptionOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input SubscriptionUpdateInput {
  user: UserRelateToOneForUpdateInput
  channel: ChannelRelateToOneForUpdateInput
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ChannelRelateToOneForUpdateInput {
  create: ChannelCreateInput
  connect: ChannelWhereUniqueInput
  disconnect: Boolean
}

input SubscriptionUpdateArgs {
  where: SubscriptionWhereUniqueInput!
  data: SubscriptionUpdateInput!
}

input SubscriptionCreateInput {
  user: UserRelateToOneForCreateInput
  channel: ChannelRelateToOneForCreateInput
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ChannelRelateToOneForCreateInput {
  create: ChannelCreateInput
  connect: ChannelWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createChannel(data: ChannelCreateInput!): Channel
  createChannels(data: [ChannelCreateInput!]!): [Channel]
  updateChannel(where: ChannelWhereUniqueInput!, data: ChannelUpdateInput!): Channel
  updateChannels(data: [ChannelUpdateArgs!]!): [Channel]
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteChannels(where: [ChannelWhereUniqueInput!]!): [Channel]
  createSubscription(data: SubscriptionCreateInput!): Subscription
  createSubscriptions(data: [SubscriptionCreateInput!]!): [Subscription]
  updateSubscription(where: SubscriptionWhereUniqueInput!, data: SubscriptionUpdateInput!): Subscription
  updateSubscriptions(data: [SubscriptionUpdateArgs!]!): [Subscription]
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteSubscriptions(where: [SubscriptionWhereUniqueInput!]!): [Subscription]
  endSession: Boolean!
  authenticateAdminWithPassword(email: String!, password: String!): AdminAuthenticationWithPasswordResult
  createInitialAdmin(data: CreateInitialAdminInput!): AdminAuthenticationWithPasswordSuccess!
}

union AdminAuthenticationWithPasswordResult = AdminAuthenticationWithPasswordSuccess | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialAdminInput {
  name: String
  email: String
  password: String
}

type Query {
  admin(where: AdminWhereUniqueInput!): Admin
  admins(where: AdminWhereInput! = {}, orderBy: [AdminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdminWhereUniqueInput): [Admin!]
  adminsCount(where: AdminWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  channel(where: ChannelWhereUniqueInput!): Channel
  channels(where: ChannelWhereInput! = {}, orderBy: [ChannelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChannelWhereUniqueInput): [Channel!]
  channelsCount(where: ChannelWhereInput! = {}): Int
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptions(where: SubscriptionWhereInput! = {}, orderBy: [SubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionWhereUniqueInput): [Subscription!]
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
